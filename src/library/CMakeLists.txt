add_library(libTAS SHARED
        backtrace.cpp
        BusyLoopDetection.cpp
        DeterministicTimer.cpp
        FPSMonitor.cpp
        frame.cpp
        GameHacks.cpp
        global.cpp
        GlobalState.cpp
        hook.cpp
        hookpatch.cpp
        logging.cpp
        main.cpp
        NonDeterministicTimer.cpp
        PerfTimer.cpp
        Stack.cpp
        TimeHolder.cpp
        UnityHacks.cpp
        Utils.cpp
        WindowTitle.cpp
        audio/AudioBuffer.cpp
        audio/AudioContext.cpp
        audio/AudioConverterSwr.cpp
        audio/AudioPlayerAlsa.cpp
        audio/AudioSource.cpp
        audio/DecoderMSADPCM.cpp
        audio/akaudio/akaudio.cpp
        audio/alsa/control.cpp
        audio/alsa/pcm.cpp
        audio/cubeb/cubeb.cpp
        audio/fluidsynth/fluidsynth.cpp
        audio/fmod/fmod.cpp
        audio/openal/al.cpp
        audio/openal/alc.cpp
        audio/openal/alext.cpp
        audio/openal/alsoft.cpp
        audio/openal/efx.cpp
        audio/pulseaudio/pulseaudio.cpp
        audio/sdl/sdlaudio.cpp
        checkpoint/AltStack.cpp
        checkpoint/Checkpoint.cpp
		checkpoint/FileDescriptorManip.cpp
        checkpoint/MemArea.cpp
        checkpoint/ProcSelfMaps.cpp
        checkpoint/ReservedMemory.cpp
        checkpoint/SaveStateLoading.cpp
        checkpoint/SaveStateSaving.cpp
        checkpoint/SaveStateManager.cpp
        checkpoint/ThreadLocalStorage.cpp
        checkpoint/ThreadManager.cpp
        checkpoint/ThreadSync.cpp
        encoding/AVEncoder.cpp
        encoding/NutMuxer.cpp
        encoding/Screenshot.cpp
        fileio/dirwrappers.cpp
        fileio/FileHandleList.cpp
        fileio/generaliowrappers.cpp
        fileio/posixiowrappers.cpp
        fileio/SaveFile.cpp
        fileio/SaveFileList.cpp
        fileio/SaveFileStream.cpp
        fileio/stdiowrappers.cpp
        fileio/URandom.cpp
        general/dlhook.cpp
        general/glibwrappers.cpp
        general/localewrappers.cpp
        general/mallocwrappers.cpp
        general/monowrappers.cpp
        general/pthreadwrappers.cpp
        general/randomwrappers.cpp
        general/signalwrappers.cpp
        general/sleepwrappers.cpp
        general/socketwrappers.cpp
        general/systemwrappers.cpp
        general/timewrappers.cpp
        general/tlswrappers.cpp
        general/waitwrappers.cpp
        inputs/evdev.cpp
        inputs/inputevents.cpp
        inputs/inputs.cpp
        inputs/ioctl_joy.cpp
        inputs/jsdev.cpp
        inputs/keyboard_helper.cpp
        inputs/sdlgamecontroller.cpp
        inputs/sdlhaptic.cpp
        inputs/sdljoystick.cpp
        inputs/sdlkeyboard.cpp
        inputs/sdlkeyboardlayout.cpp
        inputs/sdlpointer.cpp
        inputs/sdltextinput.cpp
        inputs/udevwrappers.cpp
        inputs/winekeyboardlayout.cpp
        inputs/xcbkeyboard.cpp
        inputs/xcbpointer.cpp
        inputs/xkbcommon.cpp
        inputs/xkeyboard.cpp
        inputs/xkeyboardlayout.cpp
        inputs/xinput.cpp
        inputs/xpointer.cpp
        renderhud/AudioDebug.cpp
        renderhud/Crosshair.cpp
        renderhud/FrameWindow.cpp
        renderhud/InputsWindow.cpp
        renderhud/LogWindow.cpp
        renderhud/LuaDraw.cpp
        renderhud/MessageWindow.cpp
        renderhud/WatchesWindow.cpp
        renderhud/RenderHUD_GL.cpp
        renderhud/RenderHUD_SDL2_renderer.cpp
        renderhud/RenderHUD_Vulkan.cpp
        renderhud/RenderHUD.cpp
        renderhud/RenderHUD_Base_Linux.cpp
        renderhud/UnityDebug.cpp
        rendering/eglwrappers.cpp
        rendering/glxwrappers.cpp
        rendering/openglloader.cpp
        rendering/openglwrappers.cpp
        rendering/vdpauwrappers.cpp
        rendering/vulkanwrappers.cpp
        screencapture/ScreenCapture_GL.cpp
        screencapture/ScreenCapture_SDL1.cpp
        screencapture/ScreenCapture_SDL2_Renderer.cpp
        screencapture/ScreenCapture_SDL2_Surface.cpp
        screencapture/ScreenCapture_VDPAU.cpp
        screencapture/ScreenCapture_Vulkan.cpp
        screencapture/ScreenCapture_XShm.cpp
        screencapture/ScreenCapture_Impl.cpp
        screencapture/ScreenCapture.cpp
        sdl/SDLEventQueue.cpp
        sdl/sdldisplay.cpp
        sdl/sdldynapi.cpp
        sdl/sdlevents.cpp
        sdl/sdlmain.cpp
        sdl/sdlmutex.cpp
        sdl/sdlrender.cpp
        sdl/sdlthreads.cpp
        sdl/sdltime.cpp
        sdl/sdltimer.cpp
        sdl/sdlversion.cpp
        sdl/sdlwindows.cpp
        steam/CCallback.cpp
        steam/CCallbackManager.cpp
        steam/isteamapps.cpp
        steam/isteamclient/isteamclient.cpp
        steam/isteamclient/isteamclient006.cpp
        steam/isteamclient/isteamclient012.cpp
        steam/isteamclient/isteamclient014.cpp
        steam/isteamclient/isteamclient016.cpp
        steam/isteamclient/isteamclient017.cpp
        steam/isteamclient/isteamclient020.cpp
        steam/isteamcontroller.cpp
        steam/isteamfriends.cpp
        steam/isteamgamecoordinator.cpp
        steam/isteamgameserver.cpp
        steam/isteamhttp.cpp
        steam/isteaminput.cpp
        steam/isteammatchmaking.cpp
        steam/isteamnetworking.cpp
        steam/isteamnetworkingutils.cpp
        steam/isteamnetworkingsockets.cpp
        steam/isteamnetworkingmessages.cpp
        steam/isteamremotestorage/isteamremotestorage.cpp
        steam/isteamremotestorage/isteamremotestorage001.cpp
        steam/isteamremotestorage/isteamremotestorage002.cpp
        steam/isteamremotestorage/isteamremotestorage003.cpp
        steam/isteamremotestorage/isteamremotestorage005.cpp
        steam/isteamremotestorage/isteamremotestorage007.cpp
        steam/isteamremotestorage/isteamremotestorage012.cpp
        steam/isteamremotestorage/isteamremotestorage013.cpp
        steam/isteamremotestorage/isteamremotestorage014.cpp
        steam/isteamremotestorage/isteamremotestorage016.cpp
        steam/isteamscreenshots.cpp
        steam/isteamugc.cpp
        steam/isteamuser/isteamuser.cpp
        steam/isteamuser/isteamuser021.cpp
        steam/isteamuser/isteamuser023.cpp
        steam/isteamuserstats/isteamuserstats.cpp
        steam/isteamuserstats/isteamuserstats005.cpp
        steam/isteamuserstats/isteamuserstats006.cpp
        steam/isteamuserstats/isteamuserstats007.cpp
        steam/isteamuserstats/isteamuserstats008.cpp
        steam/isteamuserstats/isteamuserstats010.cpp
        steam/isteamuserstats/isteamuserstats011.cpp
        steam/isteamuserstats/isteamuserstats012.cpp
        steam/isteamuserstats/isteamuserstats013.cpp
        steam/isteamutils.cpp
        steam/steamapi.cpp
        steam/steamapiinternal.cpp
        steam/steamgameserver.cpp
        wine/winehook.cpp
        wine/wined3d.cpp
        wine/user32.cpp
        wine/kernel32.cpp
        xcb/XcbEventQueue.cpp
        xcb/XcbEventQueueList.cpp
        xcb/xcbconnection.cpp
        xcb/xcbevents.cpp
        xcb/xcbrequests.cpp
        xcb/xcbwindows.cpp
        xlib/XlibEventQueue.cpp
        xlib/XlibEventQueueList.cpp
        xlib/XlibGameWindow.cpp
        xlib/xatom.cpp
        xlib/xcursor.cpp
        xlib/xdisplay.cpp
        xlib/xevents.cpp
        xlib/xf86vidmode.cpp
        xlib/xinerama.cpp
        xlib/xrandr.cpp
        xlib/xshm.cpp
        xlib/xwindows.cpp
        ../shared/inputs/AllInputsFlat.cpp
        ../shared/inputs/ControllerInputs.cpp
        ../shared/inputs/MiscInputs.cpp
        ../shared/inputs/MouseInputs.cpp
        ../shared/inputs/SingleInput.cpp
        ../shared/sockethelpers.cpp
        ../external/lz4.cpp
        ../external/elfhacks.cpp
        ../external/imgui/imgui_draw.cpp
        ../external/imgui/imgui_demo.cpp
        ../external/imgui/imgui_tables.cpp
        ../external/imgui/imgui_widgets.cpp
        ../external/imgui/imgui.cpp
        ../external/imgui/imgui_impl_opengl3.cpp
        ../external/imgui/imgui_impl_sdlrenderer2.cpp
        ../external/imgui/imgui_impl_vulkan.cpp
        ../external/imgui/imgui_impl_xlib.cpp
        ../external/imgui/implot_items.cpp
        ../external/imgui/implot.cpp
)

set_target_properties(libTAS PROPERTIES PREFIX "" OUTPUT_NAME "libtas")

find_package(PkgConfig)
pkg_check_modules(SWRESAMPLE REQUIRED IMPORTED_TARGET libswresample)

# todo build32lib

target_compile_definitions(libTAS PUBLIC LIBTAS_LIBRARY)
target_compile_options(libTAS PRIVATE "-fno-stack-protector")
target_link_options(libTAS PRIVATE "-rdynamic")
target_link_libraries(libTAS PRIVATE PkgConfig::SWRESAMPLE)

target_include_directories(libTAS PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
        ${CMAKE_SOURCE_DIR}/src
)
